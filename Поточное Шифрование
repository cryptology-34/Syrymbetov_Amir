class StreamCipher:
    def __init__(self, key):
        self.key = key
        self.position = 0
        self.hasher = SimpleHash(256)
        
    def _key_stream(self, length):
        """Генератор ключевого потока на основе хэш-функции"""
        result = b''
        for i in range(length):
            # Используем хэш для генерации псевдослучайной последовательности
            data = self.key + str(self.position).encode()
            hash_val = self.hasher.hash(data)
            result += bytes([hash_val[0]])
            self.position += 1
        return result
    
    def encrypt(self, data):
        """Шифрование XOR с ключевым потоком"""
        if isinstance(data, str):
            data = data.encode()
            
        key_stream = self._key_stream(len(data))
        encrypted = bytes([data[i] ^ key_stream[i] for i in range(len(data))])
        return encrypted
    
    def decrypt(self, encrypted_data):
        """Дешифрование (аналогично шифрованию)"""
        return self.encrypt(encrypted_data)

# Тестирование поточного шифра
def test_stream_cipher():
    print("=== Тестирование поточного шифра ===")
    cipher = StreamCipher(b"secret_key")
    message = "Реальность — иллюзия, вселенная — голограмма, скупай золото!"
    
    encrypted = cipher.encrypt(message)
    print(f"Исходное: {message}")
    print(f"Зашифрованное: {encrypted.hex()}")
    
    # Сбрасываем позицию для дешифрования
    cipher.position = 0
    decrypted = cipher.decrypt(encrypted)
    print(f"Расшифрованное: {decrypted.decode()}")
    print()
