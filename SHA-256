import struct

class SimpleSHA256:
    def __init__(self):
        # Начальные значения хеша
        self.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
                  0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]
        
        # Константы
        self.k = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
            0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5
        ]
    
    def _rotr(self, n, x):
        return (x >> n) | (x << (32 - n)) & 0xFFFFFFFF
    
    def _ch(self, x, y, z):
        return (x & y) ^ (~x & z)
    
    def _maj(self, x, y, z):
        return (x & y) ^ (x & z) ^ (y & z)
    
    def hash(self, message):
        if isinstance(message, str):
            message = message.encode()
        
        # Подготовка сообщения
        length = len(message) * 8
        message += b'\x80'
        while (len(message) % 64) != 56:
            message += b'\x00'
        message += struct.pack('>Q', length)
        
        # Обработка блоков
        for i in range(0, len(message), 64):
            self._process_block(message[i:i+64])
        
        # Формирование результата
        return ''.join(f'{x:08x}' for x in self.h)
    
    def _process_block(self, block):
        w = [0] * 64
        
        # Разбиваем блок на слова
        for i in range(16):
            w[i] = struct.unpack('>I', block[i*4:(i+1)*4])[0]
        
        # Расширяем слова
        for i in range(16, 64):
            s0 = self._rotr(7, w[i-15]) ^ self._rotr(18, w[i-15]) ^ (w[i-15] >> 3)
            s1 = self._rotr(17, w[i-2]) ^ self._rotr(19, w[i-2]) ^ (w[i-2] >> 10)
            w[i] = (w[i-16] + s0 + w[i-7] + s1) & 0xFFFFFFFF
        
        # Инициализация рабочих переменных
        a, b, c, d, e, f, g, h = self.h
        
        # Основной цикл
        for i in range(64):
            S1 = self._rotr(6, e) ^ self._rotr(11, e) ^ self._rotr(25, e)
            ch = self._ch(e, f, g)
            temp1 = (h + S1 + ch + self.k[i] + w[i]) & 0xFFFFFFFF
            S0 = self._rotr(2, a) ^ self._rotr(13, a) ^ self._rotr(22, a)
            maj = self._maj(a, b, c)
            temp2 = (S0 + maj) & 0xFFFFFFFF
            
            h, g, f, e, d, c, b, a = g, f, e, (d + temp1) & 0xFFFFFFFF, c, b, a, (temp1 + temp2) & 0xFFFFFFFF
        
        # Обновление хеша
        self.h = [(x + y) & 0xFFFFFFFF for x, y in zip(self.h, [a, b, c, d, e, f, g, h])]

def test_sha256():
    print("=== Тестирование SHA-256 ===")
    sha = SimpleSHA256()
    
    message = "Hello, World!"
    hash_result = sha.hash(message)
    
    print(f"Сообщение: {message}")
    print(f"Хеш SHA-256: {hash_result}")
    print()
