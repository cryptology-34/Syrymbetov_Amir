class FeistelCipher:
    def __init__(self, key, rounds=16):
        self.key = key
        self.rounds = rounds
        self.stream_cipher = StreamCipher(key)
    
    def _f_function(self, half_block, round_key):
        """Ф-функция для раунда Фейстеля"""
        # Используем поточный шифр для ф-функции
        self.stream_cipher.position = round_key
        result = self.stream_cipher.encrypt(half_block)
        return result
    
    def encrypt_block(self, block):
        """Шифрование блока по схеме Фейстеля"""
        if len(block) != 8:  # 64-битный блок
            raise ValueError("Block must be 8 bytes")
        
        left = block[:4]
        right = block[4:]
        
        for round_num in range(self.rounds):
            # Генерируем раундовый ключ
            round_key = (self.key[0] + round_num) % 256 if self.key else round_num
            
            # Фейстелевский раунд
            temp = right
            f_result = self._f_function(right, round_key)
            
            # XOR левой части с результатом ф-функции
            new_right = bytes([left[i] ^ f_result[i] for i in range(4)])
            right = new_right
            left = temp
        
        return right + left
    
    def decrypt_block(self, block):
        """Дешифрование блока"""
        if len(block) != 8:
            raise ValueError("Block must be 8 bytes")
        
        left = block[:4]
        right = block[4:]
        
        for round_num in range(self.rounds-1, -1, -1):
            # Генерируем раундовый ключ (в обратном порядке)
            round_key = (self.key[0] + round_num) % 256 if self.key else round_num
            
            temp = left
            f_result = self._f_function(left, round_key)
            
            new_left = bytes([right[i] ^ f_result[i] for i in range(4)])
            left = new_left
            right = temp
        
        return left + right

def test_feistel():
    print("=== Тестирование шифра Фейстеля ===")
    feistel = FeistelCipher(b"feistel_key")
    
    block = b"12345678"  # 8-байтовый блок
    encrypted = feistel.encrypt_block(block)
    decrypted = feistel.decrypt_block(encrypted)
    
    print(f"Исходный блок: {block}")
    print(f"Зашифрованный: {encrypted.hex()}")
    print(f"Расшифрованный: {decrypted}")
    print()
